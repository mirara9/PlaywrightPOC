name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - api
          - ui
          - integration
      headless:
        description: 'Run in headless mode'
        required: false
        default: true
        type: boolean

jobs:
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd test-app && npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          cd test-app && npm start &
          sleep 5
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000/health

      - name: Run API tests
        run: npm run test:api
        env:
          CI: true
          HEADLESS: true

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'ui' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd test-app && npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          cd test-app && npm start &
          sleep 5
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000/health

      - name: Run UI tests
        run: npm test src/tests/ui/ -- --workers=1
        env:
          CI: true
          HEADLESS: ${{ github.event.inputs.headless || 'true' }}

      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: |
            test-results/
            playwright-report/
            screenshots/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'integration' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd test-app && npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          cd test-app && npm start &
          sleep 5
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000/health

      - name: Run Integration tests
        run: npm run test:integration -- --workers=1
        env:
          CI: true
          HEADLESS: true

      - name: Upload Integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            playwright-report/
            screenshots/
          retention-days: 7

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_suite == 'all' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t playwright-test-framework .

      - name: Run API tests in Docker
        run: |
          docker run --rm \
            -v $(pwd)/test-results:/app/test-results \
            -v $(pwd)/playwright-report:/app/playwright-report \
            -e HEADLESS=true \
            -e CI=true \
            playwright-test-framework \
            npm test src/tests/api/

      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, integration-tests, docker-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./test-artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: npm install @playwright/test

      - name: Merge test reports
        run: |
          mkdir -p merged-reports
          find ./test-artifacts -name "*.json" -path "*/test-results/*" -exec cp {} merged-reports/ \;

      - name: Generate HTML report
        run: |
          if [ "$(ls -A merged-reports)" ]; then
            npx playwright merge-reports --reporter html ./test-artifacts/*/playwright-report > merged-reports/index.html || echo "Report merge failed, creating summary"
          fi
          
          # Create summary report
          echo "<h1>Playwright Test Results Summary</h1>" > merged-reports/summary.html
          echo "<ul>" >> merged-reports/summary.html
          
          for dir in ./test-artifacts/*/; do
            if [ -d "$dir" ]; then
              dirname=$(basename "$dir")
              echo "<li><strong>$dirname:</strong> " >> merged-reports/summary.html
              if [ -f "$dir/test-results/results.json" ]; then
                echo "Completed</li>" >> merged-reports/summary.html
              else
                echo "Check individual artifacts</li>" >> merged-reports/summary.html
              fi
            fi
          done
          
          echo "</ul>" >> merged-reports/summary.html

      - name: Upload merged test report
        uses: actions/upload-artifact@v4
        with:
          name: final-test-report
          path: merged-reports/
          retention-days: 30

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Playwright Test Results
          path: './test-artifacts/*/test-results/*.xml'
          reporter: java-junit
          fail-on-error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          npm audit --audit-level=high
          cd test-app && npm audit --audit-level=high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'