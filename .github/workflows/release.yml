name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-before-release:
    name: Full Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd test-app && npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          cd test-app && npm start &
          sleep 5
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000/health

      - name: Run all tests
        run: |
          npm run test:api
          npm test src/tests/ui/ -- --workers=1
          npm run test:integration -- --workers=1
        env:
          CI: true
          HEADLESS: true

      - name: Test Docker build
        run: |
          docker build -t test-release .
          docker run --rm test-release npm test src/tests/api/

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test-before-release
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          npm ci
          cd test-app && npm ci

      - name: Build package
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_clean=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.version_clean }} --no-git-tag-version
          cd test-app && npm version ${{ steps.version.outputs.version_clean }} --no-git-tag-version

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}
          labels: |
            org.opencontainers.image.title=Playwright Test Framework
            org.opencontainers.image.description=Extensible Playwright test framework with API and UI wrappers
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate changelog
        id: changelog
        run: |
          # Create changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -10)
          fi
          
          # Save changelog to file
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Docker Images" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> CHANGELOG.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Usage" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "\`\`\`bash" >> CHANGELOG.md
          echo "# Pull the image" >> CHANGELOG.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "# Run tests" >> CHANGELOG.md
          echo "docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} npm test" >> CHANGELOG.md
          echo "\`\`\`" >> CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            dist/**/*
            package.json
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        if: ${{ !contains(steps.version.outputs.version, '-') }}
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create deployment artifact
        run: |
          mkdir -p deployment
          cp -r dist deployment/
          cp -r src deployment/
          cp package.json deployment/
          cp README.md deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/
          cp -r .github deployment/
          
          tar -czf playwright-test-framework-${{ steps.version.outputs.version_clean }}.tar.gz deployment/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ steps.version.outputs.version_clean }}
          path: playwright-test-framework-${{ steps.version.outputs.version_clean }}.tar.gz
          retention-days: 90

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: build-and-release
    if: always()

    steps:
      - name: Notify success
        if: needs.build-and-release.result == 'success'
        run: |
          echo "‚úÖ Release ${{ needs.build-and-release.outputs.version || github.ref_name }} completed successfully!"
          echo "üê≥ Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          echo "üì¶ GitHub release created"

      - name: Notify failure
        if: needs.build-and-release.result == 'failure'
        run: |
          echo "‚ùå Release failed!"
          echo "Please check the workflow logs for details."
          exit 1