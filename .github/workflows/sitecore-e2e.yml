name: Sitecore E2E Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/tests/sitecore/**'
      - 'scripts/sitecore-*'
      - '.github/workflows/sitecore-e2e.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/tests/sitecore/**'
      - 'scripts/sitecore-*'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - regression
        - content
        - all
      headless:
        description: 'Run tests in headless mode'
        required: true
        default: true
        type: boolean
      skip_deployment:
        description: 'Skip Sitecore deployment (use existing)'
        required: false
        default: false
        type: boolean
      cleanup_after:
        description: 'Cleanup resources after tests'
        required: false
        default: true
        type: boolean

env:
  # Sitecore Configuration
  SITECORE_VERSION: "10.3.0"
  SITECORE_TOPOLOGY: "xp0"
  WINDOWS_VERSION: "ltsc2019"
  
  # Test Configuration
  HEADLESS: ${{ github.event.inputs.headless || 'true' }}
  TEST_SUITE: ${{ github.event.inputs.test_suite || 'smoke' }}
  SKIP_DEPLOYMENT: ${{ github.event.inputs.skip_deployment || 'false' }}
  CLEANUP_AFTER: ${{ github.event.inputs.cleanup_after || 'true' }}
  
  # Docker Configuration
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Prerequisites and validation
  prerequisites:
    runs-on: windows-latest
    timeout-minutes: 10
    outputs:
      can_deploy: ${{ steps.prereq_check.outputs.can_deploy }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check prerequisites
      id: prereq_check
      run: |
        echo "Checking Sitecore deployment prerequisites..."
        $result = node scripts/sitecore-prerequisites.js
        if ($LASTEXITCODE -eq 0) {
          echo "can_deploy=true" >> $env:GITHUB_OUTPUT
          echo "✅ Prerequisites check passed"
        } else {
          echo "can_deploy=false" >> $env:GITHUB_OUTPUT
          echo "❌ Prerequisites check failed"
        }
      shell: pwsh
      
    - name: Upload prerequisites report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: prerequisites-report
        path: |
          sitecore-health-report.json
        retention-days: 7

  # Sitecore deployment (Windows only due to container requirements)
  deploy:
    runs-on: windows-latest
    needs: prerequisites
    if: needs.prerequisites.outputs.can_deploy == 'true' && github.event.inputs.skip_deployment != 'true'
    timeout-minutes: 60
    outputs:
      deployment_success: ${{ steps.deploy.outputs.success }}
      cm_url: ${{ steps.deploy.outputs.cm_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Sitecore license
      env:
        SITECORE_LICENSE_B64: ${{ secrets.SITECORE_LICENSE_B64 }}
      run: |
        if ([string]::IsNullOrEmpty($env:SITECORE_LICENSE_B64)) {
          echo "❌ SITECORE_LICENSE_B64 secret not found"
          echo "Please add your base64-encoded Sitecore license to repository secrets"
          exit 1
        }
        
        echo "Setting up Sitecore license..."
        $licenseDir = "C:\License"
        if (!(Test-Path $licenseDir)) {
          New-Item -ItemType Directory -Path $licenseDir -Force
        }
        
        $licenseContent = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:SITECORE_LICENSE_B64))
        $licenseContent | Out-File -FilePath "C:\License\license.xml" -Encoding UTF8
        
        echo "✅ License file created"
      shell: pwsh
      
    - name: Configure Docker
      run: |
        echo "Configuring Docker for Windows containers..."
        & "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchDaemon
        docker version
        docker info
      shell: pwsh
      
    - name: Deploy Sitecore
      id: deploy
      run: |
        echo "Starting Sitecore deployment..."
        $env:SITECORE_ADMIN_PASSWORD = "SecureAdminPass123!"
        
        try {
          node scripts/sitecore-deploy.js --timeout 3600000
          echo "success=true" >> $env:GITHUB_OUTPUT
          echo "cm_url=https://xp0cm.localhost" >> $env:GITHUB_OUTPUT
          echo "✅ Sitecore deployment completed"
        } catch {
          echo "success=false" >> $env:GITHUB_OUTPUT
          echo "❌ Sitecore deployment failed: $_"
          exit 1
        }
      shell: pwsh
      timeout-minutes: 45
      
    - name: Wait for Sitecore health
      if: steps.deploy.outputs.success == 'true'
      run: |
        echo "Waiting for Sitecore to be healthy..."
        node scripts/sitecore-health-checker.js --wait --timeout 600
      shell: pwsh
      timeout-minutes: 15
      
    - name: Upload deployment logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-logs
        path: |
          sitecore-deployment/
          *.json
          *.log
        retention-days: 7

  # Test execution
  test:
    runs-on: windows-latest
    needs: [prerequisites, deploy]
    if: always() && (needs.deploy.outputs.deployment_success == 'true' || github.event.inputs.skip_deployment == 'true')
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        test_type: 
          - login
          - content-editor
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      
    - name: Configure test environment
      run: |
        echo "Setting up test environment..."
        $env:SITECORE_CM_URL = "${{ needs.deploy.outputs.cm_url || 'https://xp0cm.localhost' }}"
        $env:SITECORE_ADMIN_PASSWORD = "SecureAdminPass123!"
        $env:HEADLESS = "${{ env.HEADLESS }}"
        
        echo "SITECORE_CM_URL=$env:SITECORE_CM_URL" >> $env:GITHUB_ENV
        echo "SITECORE_ADMIN_PASSWORD=$env:SITECORE_ADMIN_PASSWORD" >> $env:GITHUB_ENV
        echo "HEADLESS=$env:HEADLESS" >> $env:GITHUB_ENV
      shell: pwsh
      
    - name: Run Sitecore tests
      run: |
        echo "Running Sitecore ${{ matrix.test_type }} tests..."
        
        $testCommand = switch ("${{ matrix.test_type }}") {
          "login" { "npm run test:sitecore:login" }
          "content-editor" { "npm run test:sitecore:content" }
          default { "npm run test:sitecore:smoke" }
        }
        
        echo "Executing: $testCommand"
        Invoke-Expression $testCommand
      shell: pwsh
      env:
        SITECORE_CM_URL: ${{ env.SITECORE_CM_URL }}
        SITECORE_ADMIN_PASSWORD: ${{ env.SITECORE_ADMIN_PASSWORD }}
        HEADLESS: ${{ env.HEADLESS }}
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test_type }}
        path: |
          test-results/
          playwright-report/
        retention-days: 14
        
    - name: Upload test screenshots
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-screenshots-${{ matrix.test_type }}
        path: test-results/
        retention-days: 14

  # E2E workflow test
  e2e_workflow:
    runs-on: windows-latest
    needs: prerequisites
    if: github.event.inputs.test_suite == 'all' || github.event_name == 'push'
    timeout-minutes: 90
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Sitecore license
      env:
        SITECORE_LICENSE_B64: ${{ secrets.SITECORE_LICENSE_B64 }}
      run: |
        if ([string]::IsNullOrEmpty($env:SITECORE_LICENSE_B64)) {
          echo "❌ SITECORE_LICENSE_B64 secret not found"
          exit 1
        }
        
        $licenseDir = "C:\License"
        if (!(Test-Path $licenseDir)) {
          New-Item -ItemType Directory -Path $licenseDir -Force
        }
        
        $licenseContent = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:SITECORE_LICENSE_B64))
        $licenseContent | Out-File -FilePath "C:\License\license.xml" -Encoding UTF8
      shell: pwsh
      
    - name: Run complete E2E workflow
      run: |
        echo "Running complete Sitecore E2E workflow..."
        $env:SITECORE_ADMIN_PASSWORD = "SecureAdminPass123!"
        
        node scripts/sitecore-e2e.js --test-suite ${{ env.TEST_SUITE }} --headless ${{ env.HEADLESS }}
      shell: pwsh
      timeout-minutes: 75
      
    - name: Upload E2E report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-report
        path: |
          sitecore-e2e-report.html
          sitecore-e2e-report.json
          sitecore-health-report.json
        retention-days: 30

  # Cleanup resources
  cleanup:
    runs-on: windows-latest
    needs: [deploy, test, e2e_workflow]
    if: always() && github.event.inputs.cleanup_after != 'false'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Cleanup Sitecore resources
      run: |
        echo "Cleaning up Sitecore resources..."
        node scripts/sitecore-cleanup.js --force --clean-containers --clean-volumes --clean-networks
      shell: pwsh
      continue-on-error: true
      
    - name: Docker system cleanup
      run: |
        echo "Performing Docker system cleanup..."
        docker system prune -f --volumes
      shell: pwsh
      continue-on-error: true

  # Report generation and notification
  report:
    runs-on: ubuntu-latest
    needs: [prerequisites, deploy, test, e2e_workflow, cleanup]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Generate summary report
      run: |
        echo "# Sitecore E2E Test Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Suite**: ${{ env.TEST_SUITE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Headless Mode**: ${{ env.HEADLESS }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Skip Deployment**: ${{ env.SKIP_DEPLOYMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🏗️ Deployment Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ **Deployment**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ env.SKIP_DEPLOYMENT }}" = "true" ]; then
          echo "⏭️ **Deployment**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🧪 Test Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📈 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Test results and reports are available in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Screenshots and logs retained for debugging" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const testResult = '${{ needs.test.result }}';
          const deployResult = '${{ needs.deploy.result }}';
          const skipDeployment = '${{ env.SKIP_DEPLOYMENT }}';
          
          let status = '✅ Tests passed';
          if (testResult !== 'success') {
            status = '❌ Tests failed';
          }
          
          let deployStatus = '';
          if (skipDeployment === 'true') {
            deployStatus = '⏭️ Deployment skipped';
          } else if (deployResult === 'success') {
            deployStatus = '✅ Deployment successful';
          } else {
            deployStatus = '❌ Deployment failed';
          }
          
          const comment = `## 🎯 Sitecore E2E Test Results
          
          ${status}
          ${deployStatus}
          
          **Test Suite**: ${{ env.TEST_SUITE }}
          **Headless Mode**: ${{ env.HEADLESS }}
          
          📊 **Details**: Check the [workflow run](${context.payload.pull_request.html_url}/checks) for detailed results and artifacts.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });